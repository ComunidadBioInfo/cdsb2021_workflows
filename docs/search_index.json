[["mi-primera-aplicación-shinyr.html", "15 Mi primera aplicación ShinyR 15.1 Diapositivas 15.2 Paso 0: Genera un código lineal 15.3 Paso 1: Genera la Shiny app y agrega una primer gráfica 15.4 Paso 2: Agrega una opción para seleccionar datos 15.5 Paso 3: Agrega una barra con rangos de valores 15.6 Paso 4: Agrega botones 15.7 Paso 5: Agrega algo de texto 15.8 Paso 6: Genera una segunda gráfica 15.9 Paso 7: 15.10 Paso 8: Agrega una segunda pestaña 15.11 Paso 9: Agrega una tercer pestaña", " 15 Mi primera aplicación ShinyR Alejandro Reyes 12 de agosto de 2021 15.1 Diapositivas 15.2 Paso 0: Genera un código lineal library(dslabs) library(magrittr) library(ggplot2) library(tidyverse) library(ggridges) data(gapminder) ymin &lt;- 1960 ymax &lt;- 2016 colorBy &lt;- &quot;continent&quot; gapminder %&gt;% filter( country %in% c(&quot;Mexico&quot;, &quot;South Korea&quot;, &quot;Germany&quot;) ) %&gt;% ggplot( aes( year, life_expectancy, col=get(colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + xlim(c(ymin, ymax)) + labs(col=colorBy) gapminder %&gt;% filter( country %in% c(&quot;Mexico&quot;, &quot;South Korea&quot;, &quot;Germany&quot;) ) %&gt;% ggplot( aes( year, fertility, col=get(colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + xlim(c(ymin, ymax)) + labs(col=colorBy) keep_regions &lt;- gapminder %&gt;% filter( country %in% c(&quot;Mexico&quot;, &quot;South Korea&quot;, &quot;Germany&quot;) ) %&gt;% pull( region ) %&gt;% as.character %&gt;% unique gapminder %&gt;% mutate( dollars_per_day=gdp/population/365 ) %&gt;% filter( year %in% seq(1960, 2010, 10), !is.na(dollars_per_day), region %in% keep_regions ) %&gt;% filter( between(year, ymin, ymax) ) %&gt;% ggplot( aes( dollars_per_day, factor(year) ) ) + scale_x_continuous(trans = &quot;log2&quot;) + geom_density_ridges(jittered_points = TRUE) + facet_grid( ~region, scales=&quot;free&quot;) gapminder %&gt;% mutate( dollars_per_day=gdp/population/365 ) %&gt;% filter( country %in% c(&quot;Mexico&quot;, &quot;South Korea&quot;, &quot;Germany&quot;), between( year, ymin, ymax) ) 15.3 Paso 1: Genera la Shiny app y agrega una primer gráfica library(shiny) library(dslabs) library(magrittr) library(ggplot2) library(tidyverse) library(ggridges) data(gapminder) ymin &lt;- 1960 ymax &lt;- 2016 colorBy &lt;- &quot;continent&quot; ui &lt;- fluidPage( # Application title titlePanel(&quot;Visualización exploratoria de gapminder&quot;), # Sidebar for parameters sidebarLayout( sidebarPanel(), mainPanel( plotOutput(&quot;lifeExpPlot&quot;) ) ) ) # Define server logic required to draw a histogram server &lt;- function(input, output) { output$lifeExpPlot &lt;- renderPlot({ gapminder %&gt;% filter( country %in% c(&quot;Mexico&quot;, &quot;South Korea&quot;, &quot;Germany&quot;) ) %&gt;% ggplot( aes( year, life_expectancy, col=get(colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + xlim(c(ymin, ymax)) + labs(col=colorBy) }) } # Run the application shinyApp(ui = ui, server = server) 15.4 Paso 2: Agrega una opción para seleccionar datos library(shiny) library(dslabs) library(magrittr) library(ggplot2) library(tidyverse) library(ggridges) data(gapminder) ymin &lt;- 1960 ymax &lt;- 2016 colorBy &lt;- &quot;continent&quot; ui &lt;- fluidPage( # Application title titlePanel(&quot;Visualización exploratoria de gapminder&quot;), # Sidebar for parameters sidebarLayout( sidebarPanel( ## Código para seleccionar paises selectizeInput( &#39;countries&#39;, label = &quot;Seleccionar paises&quot;, choices = levels(gapminder$country), multiple=TRUE) ), mainPanel( plotOutput(&quot;lifeExpPlot&quot;) ) ) ) # Define server logic server &lt;- function(input, output) { output$lifeExpPlot &lt;- renderPlot({ gapminder %&gt;% filter( country %in% input$countries ) %&gt;% ggplot( aes( year, life_expectancy, col=get(colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + xlim(c(ymin, ymax)) + labs(col=colorBy) }) } # Run the application shinyApp(ui = ui, server = server) 15.5 Paso 3: Agrega una barra con rangos de valores library(shiny) library(dslabs) library(magrittr) library(ggplot2) library(tidyverse) library(ggridges) data(gapminder) colorBy &lt;- &quot;continent&quot; ui &lt;- fluidPage( # Application title titlePanel(&quot;Visualización exploratoria de gapminder&quot;), # Sidebar for parameters sidebarLayout( sidebarPanel( ## Código para seleccionar paises selectizeInput( &#39;countries&#39;, label = &quot;Seleccionar paises&quot;, choices = levels(gapminder$country), multiple=TRUE), sliderInput( &#39;ylms&#39;, label = h3(&quot;Años contemplados&quot;), min = 1960, max = 2020, value = c(1960, 2016) ) ), mainPanel( plotOutput(&quot;lifeExpPlot&quot;) ) ) ) # Define server logic server &lt;- function(input, output) { output$lifeExpPlot &lt;- renderPlot({ gapminder %&gt;% filter( country %in% input$countries ) %&gt;% ggplot( aes( year, life_expectancy, col=get(colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=colorBy) }) } # Run the application shinyApp(ui = ui, server = server) 15.6 Paso 4: Agrega botones library(shiny) library(dslabs) library(magrittr) library(ggplot2) library(tidyverse) library(ggridges) data(gapminder) ui &lt;- fluidPage( # Application title titlePanel(&quot;Visualización exploratoria de gapminder&quot;), # Sidebar for parameters sidebarLayout( sidebarPanel( ## Código para seleccionar paises selectizeInput( &#39;countries&#39;, label = h3(&quot;Seleccionar paises&quot;), choices = levels(gapminder$country), multiple=TRUE), sliderInput( &#39;ylms&#39;, label = h3(&quot;Años contemplados&quot;), min = 1960, max = 2020, value = c(1960, 2016) ), radioButtons( &#39;colorBy&#39;, label=h3(&quot;Colorear por&quot;), choices = c(pais=&quot;country&quot;, continente=&quot;continent&quot;), selected = &quot;continent&quot; ) ), mainPanel( plotOutput(&quot;lifeExpPlot&quot;) ) ) ) # Define server logic server &lt;- function(input, output) { output$lifeExpPlot &lt;- renderPlot({ gapminder %&gt;% filter( country %in% input$countries ) %&gt;% ggplot( aes( year, life_expectancy, col=get(input$colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=input$colorBy) }) } # Run the application shinyApp(ui = ui, server = server) 15.7 Paso 5: Agrega algo de texto library(shiny) library(dslabs) library(magrittr) library(ggplot2) library(tidyverse) library(ggridges) data(gapminder) ui &lt;- fluidPage( # Application title titlePanel(&quot;Visualización exploratoria de gapminder&quot;), # Sidebar for parameters sidebarLayout( sidebarPanel( ## Código para seleccionar paises selectizeInput( &#39;countries&#39;, label = h3(&quot;Seleccionar paises&quot;), choices = levels(gapminder$country), multiple=TRUE), sliderInput( &#39;ylms&#39;, label = h3(&quot;Años contemplados&quot;), min = 1960, max = 2020, value = c(1960, 2016) ), radioButtons( &#39;colorBy&#39;, label=h3(&quot;Colorear por&quot;), choices = c(pais=&quot;country&quot;, continente=&quot;continent&quot;), selected = &quot;continent&quot; ) ), mainPanel( tabsetPanel( tabPanel(&quot;Esperanza de vida&quot;, plotOutput(&quot;lifeExpPlot&quot;), textOutput(&quot;plotLegend&quot;)) ) ) ) ) # Define server logic server &lt;- function(input, output) { output$lifeExpPlot &lt;- renderPlot({ gapminder %&gt;% filter( country %in% input$countries ) %&gt;% ggplot( aes( year, life_expectancy, col=get(input$colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=input$colorBy) }) output$plotLegend &lt;- renderText({ sprintf(&quot;Datos de esperanza de vida del año %d al año %d. Cada color representa un %s. Los siguientes países estan representados en el gráfico: %s.&quot;, input$ylms[1], input$ylms[2], ifelse(input$colorBy == &quot;continent&quot;, &quot;continente&quot;, &quot;país&quot;), paste(input$countries, collapse=&quot;, &quot;)) }) } # Run the application shinyApp(ui = ui, server = server) 15.8 Paso 6: Genera una segunda gráfica library(shiny) library(dslabs) library(magrittr) library(ggplot2) library(tidyverse) library(ggridges) data(gapminder) ui &lt;- fluidPage( # Application title titlePanel(&quot;Visualización exploratoria de gapminder&quot;), # Sidebar for parameters sidebarLayout( sidebarPanel( ## Código para seleccionar paises selectizeInput( &#39;countries&#39;, label = h3(&quot;Seleccionar paises&quot;), choices = levels(gapminder$country), multiple=TRUE), sliderInput( &#39;ylms&#39;, label = h3(&quot;Años contemplados&quot;), min = 1960, max = 2020, value = c(1960, 2016) ), radioButtons( &#39;colorBy&#39;, label=h3(&quot;Colorear por&quot;), choices = c(pais=&quot;country&quot;, continente=&quot;continent&quot;), selected = &quot;continent&quot; ) ), mainPanel( tabsetPanel( tabPanel(&quot;Esperanza de vida&quot;, plotOutput(&quot;lifeExpPlot&quot;), textOutput(&quot;plotLegend&quot;), plotOutput(&quot;fertilityPlot&quot;)) ) ) ) ) # Define server logic server &lt;- function(input, output) { output$lifeExpPlot &lt;- renderPlot({ gapminder %&gt;% filter( country %in% input$countries ) %&gt;% ggplot( aes( year, life_expectancy, col=get(input$colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=input$colorBy) }) output$plotLegend &lt;- renderText({ sprintf(&quot;Datos de esperanza de vida del año %d al año %d. Cada color representa un %s. Los siguientes países estan representados en el gráfico: %s.&quot;, input$ylms[1], input$ylms[2], ifelse(input$colorBy == &quot;continent&quot;, &quot;continente&quot;, &quot;país&quot;), paste(input$countries, collapse=&quot;, &quot;)) }) output$fertilityPlot &lt;- renderPlot({ gapminder %&gt;% filter( country %in% input$countries ) %&gt;% ggplot( aes( year, fertility, col=get(input$colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=input$colorBy) }) } # Run the application shinyApp(ui = ui, server = server) 15.9 Paso 7: library(shiny) library(dslabs) library(magrittr) library(ggplot2) library(tidyverse) library(ggridges) data(gapminder) ui &lt;- fluidPage( # Application title titlePanel(&quot;Visualización exploratoria de gapminder&quot;), # Sidebar for parameters sidebarLayout( sidebarPanel( ## Código para seleccionar paises selectizeInput( &#39;countries&#39;, label = h3(&quot;Seleccionar paises&quot;), choices = levels(gapminder$country), multiple=TRUE), sliderInput( &#39;ylms&#39;, label = h3(&quot;Años contemplados&quot;), min = 1960, max = 2020, value = c(1960, 2016) ), radioButtons( &#39;colorBy&#39;, label=h3(&quot;Colorear por&quot;), choices = c(pais=&quot;country&quot;, continente=&quot;continent&quot;), selected = &quot;continent&quot; ) ), mainPanel( tabsetPanel( tabPanel(&quot;Esperanza de vida&quot;, plotOutput(&quot;lifeExpPlot&quot;), textOutput(&quot;plotLegend&quot;), plotOutput(&quot;fertilityPlot&quot;) ) ) ) ) ) # Define server logic server &lt;- function(input, output) { gapminderSub &lt;- reactive({ gapminder %&gt;% filter( country %in% input$countries ) }) output$lifeExpPlot &lt;- renderPlot({ gapminderSub() %&gt;% ggplot( aes( year, life_expectancy, col=get(input$colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=input$colorBy) }) output$plotLegend &lt;- renderText({ sprintf(&quot;Datos de esperanza de vida del año %d al año %d. Cada color representa un %s. Los siguientes países estan representados en el gráfico: %s.&quot;, input$ylms[1], input$ylms[2], ifelse(input$colorBy == &quot;continent&quot;, &quot;continente&quot;, &quot;país&quot;), paste(input$countries, collapse=&quot;, &quot;)) }) output$fertilityPlot &lt;- renderPlot({ gapminderSub() %&gt;% ggplot( aes( year, fertility, col=get(input$colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=input$colorBy) }) } # Run the application shinyApp(ui = ui, server = server)library(shiny) library(dslabs) library(magrittr) library(ggplot2) library(tidyverse) library(ggridges) data(gapminder) ui &lt;- fluidPage( # Application title titlePanel(&quot;Visualización exploratoria de gapminder&quot;), # Sidebar for parameters sidebarLayout( sidebarPanel( ## Código para seleccionar paises selectizeInput( &#39;countries&#39;, label = h3(&quot;Seleccionar paises&quot;), choices = levels(gapminder$country), multiple=TRUE), sliderInput( &#39;ylms&#39;, label = h3(&quot;Años contemplados&quot;), min = 1960, max = 2020, value = c(1960, 2016) ), radioButtons( &#39;colorBy&#39;, label=h3(&quot;Colorear por&quot;), choices = c(pais=&quot;country&quot;, continente=&quot;continent&quot;), selected = &quot;continent&quot; ) ), mainPanel( tabsetPanel( tabPanel(&quot;Esperanza de vida&quot;, plotOutput(&quot;lifeExpPlot&quot;), textOutput(&quot;plotLegend&quot;), plotOutput(&quot;fertilityPlot&quot;) ) ) ) ) ) # Define server logic server &lt;- function(input, output) { gapminderSub &lt;- reactive({ gapminder %&gt;% filter( country %in% input$countries ) }) output$lifeExpPlot &lt;- renderPlot({ gapminderSub() %&gt;% ggplot( aes( year, life_expectancy, col=get(input$colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=input$colorBy) }) output$plotLegend &lt;- renderText({ sprintf(&quot;Datos de esperanza de vida del año %d al año %d. Cada color representa un %s. Los siguientes países estan representados en el gráfico: %s.&quot;, input$ylms[1], input$ylms[2], ifelse(input$colorBy == &quot;continent&quot;, &quot;continente&quot;, &quot;país&quot;), paste(input$countries, collapse=&quot;, &quot;)) }) output$fertilityPlot &lt;- renderPlot({ gapminderSub() %&gt;% ggplot( aes( year, fertility, col=get(input$colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=input$colorBy) }) } # Run the application shinyApp(ui = ui, server = server) 15.10 Paso 8: Agrega una segunda pestaña library(shiny) library(dslabs) library(magrittr) library(ggplot2) library(tidyverse) library(ggridges) data(gapminder) ui &lt;- fluidPage( # Application title titlePanel(&quot;Visualización exploratoria de gapminder&quot;), # Sidebar for parameters sidebarLayout( sidebarPanel( ## Código para seleccionar paises selectizeInput( &#39;countries&#39;, label = h3(&quot;Seleccionar paises&quot;), choices = levels(gapminder$country), multiple=TRUE), sliderInput( &#39;ylms&#39;, label = h3(&quot;Años contemplados&quot;), min = 1960, max = 2020, value = c(1960, 2016) ), radioButtons( &#39;colorBy&#39;, label=h3(&quot;Colorear por&quot;), choices = c(pais=&quot;country&quot;, continente=&quot;continent&quot;), selected = &quot;continent&quot; ) ), mainPanel( tabsetPanel( tabPanel(&quot;Esperanza de vida&quot;, plotOutput(&quot;lifeExpPlot&quot;), textOutput(&quot;plotLegend&quot;)), tabPanel(&quot;Fertilidad&quot;, plotOutput(&quot;fertilityPlot&quot;)) ) ) ) ) # Define server logic server &lt;- function(input, output) { gapminderSub &lt;- reactive({ gapminder %&gt;% filter( country %in% input$countries ) }) output$lifeExpPlot &lt;- renderPlot({ gapminderSub() %&gt;% ggplot( aes( year, life_expectancy, col=get(input$colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=input$colorBy) }) output$plotLegend &lt;- renderText({ sprintf(&quot;Datos de esperanza de vida del año %d al año %d. Cada color representa un %s. Los siguientes países estan representados en el gráfico: %s.&quot;, input$ylms[1], input$ylms[2], ifelse(input$colorBy == &quot;continent&quot;, &quot;continente&quot;, &quot;país&quot;), paste(input$countries, collapse=&quot;, &quot;)) }) output$fertilityPlot &lt;- renderPlot({ gapminderSub() %&gt;% ggplot( aes( year, fertility, col=get(input$colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=input$colorBy) }) } # Run the application shinyApp(ui = ui, server = server) 15.11 Paso 9: Agrega una tercer pestaña library(shiny) library(dslabs) library(magrittr) library(ggplot2) library(tidyverse) library(ggridges) data(gapminder) ui &lt;- fluidPage( # Application title titlePanel(&quot;Visualización exploratoria de gapminder&quot;), # Sidebar for parameters sidebarLayout( sidebarPanel( ## Código para seleccionar paises selectizeInput( &#39;countries&#39;, label = h3(&quot;Seleccionar paises&quot;), choices = levels(gapminder$country), multiple=TRUE), sliderInput( &#39;ylms&#39;, label = h3(&quot;Años contemplados&quot;), min = 1960, max = 2020, value = c(1960, 2016) ), radioButtons( &#39;colorBy&#39;, label=h3(&quot;Colorear por&quot;), choices = c(pais=&quot;country&quot;, continente=&quot;continent&quot;), selected = &quot;continent&quot; ) ), mainPanel( tabsetPanel( tabPanel(&quot;Esperanza de vida&quot;, plotOutput(&quot;lifeExpPlot&quot;), textOutput(&quot;plotLegend&quot;)), tabPanel(&quot;Fertilidad&quot;, plotOutput(&quot;fertilityPlot&quot;)), tabPanel(&quot;Riqueza sobre tiempo&quot;, plotOutput(&quot;ridgesPlot&quot;)) ) ) ) ) # Define server logic server &lt;- function(input, output) { gapminderSub &lt;- reactive({ gapminder %&gt;% filter( country %in% input$countries ) }) output$lifeExpPlot &lt;- renderPlot({ gapminderSub() %&gt;% ggplot( aes( year, life_expectancy, col=get(input$colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=input$colorBy) }) output$plotLegend &lt;- renderText({ sprintf(&quot;Datos de esperanza de vida del año %d al año %d. Cada color representa un %s. Los siguientes países estan representados en el gráfico: %s.&quot;, input$ylms[1], input$ylms[2], ifelse(input$colorBy == &quot;continent&quot;, &quot;continente&quot;, &quot;país&quot;), paste(input$countries, collapse=&quot;, &quot;)) }) output$fertilityPlot &lt;- renderPlot({ gapminderSub() %&gt;% ggplot( aes( year, fertility, col=get(input$colorBy), group=country )) + geom_point( size=0.3 ) + geom_line( ) + coord_cartesian(xlim=c(input$ylms[1], input$ylms[2])) + labs(col=input$colorBy) }) output$ridgesPlot &lt;- renderPlot({ keep_regions &lt;- gapminderSub() %&gt;% pull( region ) %&gt;% as.character %&gt;% unique gapminder %&gt;% mutate( dollars_per_day=gdp/population/365 ) %&gt;% filter( year %in% seq(1960, 2010, 10), !is.na(dollars_per_day), region %in% keep_regions ) %&gt;% filter( between(year, input$ylms[1], input$ylms[2]) ) %&gt;% ggplot( aes( dollars_per_day, factor(year) ) ) + scale_x_continuous(trans = &quot;log2&quot;) + geom_density_ridges(jittered_points = TRUE) + facet_grid( ~region, scales=&quot;free&quot;) }) } # Run the application shinyApp(ui = ui, server = server) "]]
