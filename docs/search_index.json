[["index.html", "Workshop CDSB 2021: Flujos de trabajo con RStudio y creación de Shiny apps Bienvenida 0.1 Instructores 0.2 Ponentes invitados 0.3 Temario 0.4 Patrocinadores 0.5 Licencia", " Workshop CDSB 2021: Flujos de trabajo con RStudio y creación de Shiny apps Joselyn Chávez, Erick Cuevas-Fernández, Alejandro Reyes, Alejandra Medina-Rivera, María Teresa Ortiz, Mirna Vázquez Rosas-Landa, Aurora Labastida, Ángel Escalante, Alejandro Ponce. Bienvenida ](https://comunidadbioinfo.github.io/cdsb2021_workflows/bienvenida.html) Bienvenidos al Workshop Flujos de trabajo con RStudio y creación de Shiny apps! En este taller haremos un recorrido por las configuraciones avanzadas de RStudio y te hablaremos sobre las buenas prácticas para organizar tu código en proyectos de RStudio. Además, te mostraremos cómo trabajar en proyectos colaborativos usando control de versiones y cómo resolver conflictos al trabajar en este tipo de proyectos. Finalizaremos con un recorrido introductorio sobre las aplicaciones de Shiny y te mostraremos cómo crear tu primera aplicación. Todas las sesiones serán teóricas y prácticas. Nos enfocaremos en tres temas principales: Manejo de proyectos de RStudio. Control de versiones con GitHub. Creación de Shiny apps. 0.1 Instructores M.C. Joselyn Chávez M.C. Erick Cuevas-Fernández Dr. Alejandro Reyes Dra. Alejandra Medina-Rivera M.C. María Teresa Ortiz Dra. Mirna Vázquez Rosas-Landa M.C. Aurora Labastida 0.2 Ponentes invitados Dra. Ana Beatriz Villaseñor Altamirano Lic. Ángel Escalante Dr. Alejandro Ponce 0.3 Temario Consulta el calendario de este curso en: http://bit.ly/calendarcdsb2021 0.3.1 Lunes 9 de agosto Horario Tema Instructor 10:00-11:00 Hacks de RStudio Erick Cuevas Fernández 11:30-13:00 Flujo de trabajo con proyectos de RStudio Joselyn Chávez 13:00-14:00 Generando mi primer proyecto de RStudio Joselyn Chávez 15:30-16:30 Trabajando con paths seguros María Teresa Ortiz 16:30-17:30 Buenas prácticas para nombrar archivos María Teresa Ortiz 0.3.2 Martes 10 de agosto Horario Tema Instructor 9:00-10:00 Introducción a Git y GitHub desde terminal Mirna Vázquez Rosas-Landa 10:00-11:00 Generando un proyecto colaborativo con Git/GitHub Aurora Labastida 11:30-12:00 Keynote: La comunidad R-Ladies Ana Beatriz Villaseñor Altamirano 12:00-14:00 Git y GitHub con RStudio Erick Cuevas Fernández 15:30-17:30 Merge y conflictos de versiones en Git y GitHub Alejandra Medina Rivera 0.3.3 Miércoles 11 de agosto Horario Tema Instructor 9:00-10:30 Modificando los archivos de inicio de R Joselyn Chávez 11:30-12:30 Keynote Código legible con R: buenas prácticas de escritura Ángel Escalante 15:30-16:30 Mantenimiento del espacio de trabajo Joselyn Chávez 16:30-17:30 Instalación de paqueterías desde código fuente Joselyn Chávez 0.3.4 Jueves 12 de agosto Horario Tema Instructor 9:00-11:00 Introducción a Shiny Erick Cuevas Fernández 11:30-14:00 Creando mi primera aplicación de Shiny Alejandro Reyes 15:30-17:30 Proyecto colaborativo Alejandro Reyes, Erick Cuevas Fernández, Joselyn Chávez 0.3.5 Viernes 13 de agosto Horario Tema Instructor 9:00-11:00 Proyecto colaborativo Alejandro Reyes, Erick Cuevas Fernández, Joselyn Chávez 11:30-12:30 Keynote: Aplicaciones ShinyR en la vida diaria Alejandro Ponce 12:30-14:00 Proyecto colaborativo Alejandro Reyes, Erick Cuevas Fernández, Joselyn Chávez 15:30-17:00 Presentación de proyectos Alejandro Reyes, Erick Cuevas Fernández, Joselyn Chávez 0.4 Patrocinadores Agradecemos a nuestros patrocinadores: 0.5 Licencia Este material posee una licencia tipo Creative Commons Attribution-ShareAlike 4.0 International License. Para conocer más sobre esta licencia, visite http://creativecommons.org/licenses/by-sa/4.0/ Este material está basado en: RStudioConf2020 workshop What They Forgot. El material de Happy Git with R. El libro Mastering Shiny "],["rstudio-hacks.html", "1 RStudio hacks 1.1 Diapositivas 1.2 Misión de RStudio 1.3 Equipo de RStudio 1.4 Historia de RStudio 1.5 Primeros consejos para iniciar 1.6 La interfaz gráfica de RStudio 1.7 Atajos con el teclado en RStudio", " 1 RStudio hacks Erick Cuevas Fernández 9 de agosto de 2021 1.1 Diapositivas 1.2 Misión de RStudio “La misión de RStudio es crear software gratuito y de código abierto para ciencia de datos, investigación científica y comunicación técnica. Hacemos esto para mejorar la producción y el consumo de conocimiento por parte de todos, independientemente de los medios económicos, y para facilitar la colaboración y la investigación reproducible, las cuales son críticas” 1.3 Equipo de RStudio “Las personas que se han unido a RStudio en este viaje son extraordinarias. Incluyen un número excepcional de los científicos de datos y desarrolladores de software de código abierto más productivos y respetados del mundo.” 1.4 Historia de RStudio 1.5 Primeros consejos para iniciar Al abrir RStudio la consola nos arroja el mensaje que se muestra a continuación en la imagen. En este mensaje nos indica la versión de R que tenemos instalada y la plataforma en la que estamos trabajando. Para citar R en alguna publicación basta con usar la función citation(). Y para conocer a todo el equipo detrás del desarrollo de R, puedes consultarlo con la función contributors(). R y RStudio están diseñados para que muchas personas puedan aprenderlo desde cero, con tan solo este primer mensaje todo usuario podría empezar a aprender R; para empezar a aprender R intenta usar la función en tu consola de help.start() con el cual se desplegará un menú en HTML con todos los manuales para aprender a usar R, también aparecerán los manuales de todas las paqueterías del repositorio de CRAN (The Comprehensive R archive Network) así como enlaces a noticias del mundo de R. Otro consejo útil al momento de iniciar con el uso de una paquetería o función en particular es ejecutar la función demo(). Esta función se puede utilizar con los siguientes argumentos. demo(topic, package = NULL, lib.loc = NULL, character.only = FALSE, verbose = getOption(&quot;verbose&quot;), echo = TRUE, ask = getOption(&quot;demo.ask&quot;), encoding = getOption(&quot;encoding&quot;)) Para desplegar todos las demostraciones disponibles ejecuta la función como se muestra a continuación: demo(package = .packages(all.available = TRUE)) 1.6 La interfaz gráfica de RStudio RStudio es un entorno de desarrollo integrado (IDE) para R. Su interfaz gráfica incluye 4 paneles principales. 1.7 Atajos con el teclado en RStudio NOTA: en windows en vez de command usa control %&gt;% : command + Shift + m Para comentar código: command + Shift + c Expandir cursor: mantén presionado Alt + usa el cursor Ejecutar en la terminal líena de código y saltar a la siguiente línea de código: command + Enter Ejecutar en la terminal línea de código y mantenerse en la línea de código: Alt + Enter "],["flujos-de-trabajo-con-proyectos-de-rstudio.html", "2 Flujos de trabajo con proyectos de RStudio 2.1 Diapositivas 2.2 ¿Qué es un proyecto de RStudio? 2.3 ¿Cómo generamos un proyecto de RStudio? 2.4 ¿Por qué usar proyectos de RStudio? 2.5 Algunos hacks!", " 2 Flujos de trabajo con proyectos de RStudio Joselyn Chávez 9 de agosto de 2021 div.grey { background-color: #bfbfbf; text-align:center; } 2.1 Diapositivas 2.2 ¿Qué es un proyecto de RStudio? Es un archivo especial de R, compatible con RStudio, que al ejecutarlo hará 3 cosas: Abrirá una nueva sesión de RStudio. Establecerá la ubicación del proyecto como tu directorio de trabajo. Establecerá la ubicación del proyecto como la raíz de los archivos. 2.3 ¿Cómo generamos un proyecto de RStudio? 2.3.1 Opción 1: Creando un proyecto en un directorio nuevo. En las opciones de RStudio Ve a File &gt; New project &gt; New Directory &gt; New Project. Asigna un nombre a tu proyecto, sin espacios y sin caracteres especiales. Selecciona la ubicación donde crearás el nuevo directorio. Selecciona la opción Open in New Session. Oprime Create Project. Actividad 1 Genera un proyecto de RStudio llamado ‘nuevodirectorio’ en un directorio nuevo en tus Documentos (~/Documentos). 2.3.2 Opción 2: Creando un proyecto en un directorio existente. Crea un directorio en alguna ubicación conocida de tu computadora. Asigna un nombre a tu directorio, sin espacios y sin caracteres especiales (Este será el nombre de tu proyecto). En las opciones de RStudio ve a File &gt; New project &gt; Existing Directory. Selecciona la ubicación donde previamente creaste el directorio. Selecciona la opción Open in New Session. Oprime Create Project. Actividad 2 Genera una carpeta o directorio llamado ‘directorioprevio’ en tus Documentos (~/Documentos), después genera un proyecto de RStudio usando este folder como base. 2.4 ¿Por qué usar proyectos de RStudio? Te permiten ser más organizado y pasar de tener una ensalada de archivos a tener carpetas para cada sección del análisis. Compartamentalizas tu trabajo al generar un proyecto específico para cada análisis. Te permiten trabajar con varios proyectos a la vez en sesiones independientes de RStudio, cada uno con sus propias variables, directorio de trabajo y archivos. Establece automáticamente tu directorio de trabajo. En lugar de usar setwd() solamente requieres ejecutar el archivo .Rproj para abrir la sesión y trabajar en la ubicación del proyecto. Puedes usar rutas relativas (y estables) a tus archivos, que seguirán funcionando sin importar en dónde se ubique tu proyecto. Facilita el compartir y reproducir tu trabajo. No más rutas al estilo ~/MiComputadora/MiFolder/MiArchivo. Comparte la carpeta completa de tu proyecto con todos los archivos necesarios y usa rutas relativas dentro del Rscript, por ejemplo ./datos. Nos ayuda a establecer colaboraciones y trabajar con plataformas de control de versiones. Actividad 3 Comprueba algunas ventajas de usar proyectos de RStudio. Genera un nuevo proyecto de RStudio llamado ‘miproyecto’, recuerda que existen varias formas para hacerlo. Cierra la sesión y vuelve a abrirla ejecutando desde la terminal open miproyecto.Rproj o dando doble click sobre el archivo miproyecto.Rproj. Evalúa tu directorio de trabajo ejecutando en la consola de RStudio el comando getwd(). Cierra la sesión y mueve toda la carpeta de tu proyecto a otra ubicación. Si lo creaste en Documentos mueve la carpeta al Escritorio o viceversa. Abre nuevamente el proyecto y verifica el directorio de trabajo, ¿Cambió el directorio de trabajo? Sin cerrar este proyecto, abre alguno de los proyectos que generaste previamente (por ejemplo directorioprevio.Rproj), recuerda que puedes seleccionar Open Project in New session 2.5 Algunos hacks! RStudio recuerda los proyectos con los que has trabajado recientemente. Ve a la esquina superior derecha y da click en la flecha junto al nombre de tu proyecto actual. Verás todos los proyectos recientes. Si das click en el nombre de alguno de ellos te abrirá el proyecto en la misma sesión, si das click en el recuadro con flecha blanca te abrirá una nueva sesión con tu proyecto. Crea todos tus proyectos dentro de una carpeta principal y usa el buscador de archivos para acceder a ellos rápidamente. "],["generando-mi-primer-proyecto-de-rstudio.html", "3 Generando mi primer proyecto de RStudio 3.1 Diapositivas 3.2 Buenas prácticas para ordenar tu proyecto 3.3 Utiliza las rutas adecuadas a los archivos 3.4 Compartiendo tus proyectos", " 3 Generando mi primer proyecto de RStudio Joselyn Chávez 9 de agosto de 2021 div.grey { background-color: #bfbfbf; text-align:center; } 3.1 Diapositivas 3.2 Buenas prácticas para ordenar tu proyecto Genera carpetas con: Entradas (datos originales y datos filtrados). Procedimientos (Rscripts con el filtrado, manejo de datos, análisis, generación de gráficas). Salidas (Gráficas generadas y resultados). Actividad 1 Descarga la carpeta proyecto_desordenado desde https://bit.ly/cdsb2021_workflows y ordena los archivos en subcarpetas, considera las recomendaciones mencionadas anteriormente. 3.3 Utiliza las rutas adecuadas a los archivos Ahora que has reorganizado tu proyecto, debes usar las rutas relativas para importar y exportar tus archivos en sus directorios correspondientes. Recuerda que la raiz de tu proyecto será el directorio principal. Por ejemplo: tb &lt;- read.table(&quot;datos/mis_datos.txt&quot;, header = TRUE) Actividad 2 Con tu proyecto ordenado, abre el archivo analisis.R y corrige las rutas a los archivos considerando los subdirectorios que creaste. Mejora aún más tu proyecto! Secciona tu código y crea nuevos scripts con cada una de las secciones que detectes en el análisis. 3.4 Compartiendo tus proyectos Una de las ventajas de usar proyectos de RStudio es facilitar la colaboración con otras personas, así como compartir tu código de manera reproducible. Lo más común es utilizar control de versiones, por ejemplo en GitHub o GitLab. Pero comencemos compartiendo nuestro proyecto mediante Drive. Actividad 3 Genera un proyecto en tu computadora que contenga lo siguiente: Un Rscript o Rmd con un pequeño análisis usando datos públicos de R, por ejemplo puedes usar los datos palmperpinguins, gapminder, o los conjuntos de datos en español del paquete datos. Genera al menos un archivo de salida, por ejemplo una gráfica, una tabla, un archivo de texto o un html relacionado con tu análisis. Crea los subdirectorios necesarios para ordernar tu proyecto y verifica que tu Rscript o Rmd contenga las rutas necesarias para leer o escribir estos archivos en las subcarpetas. Intercambien proyectos! Carga tu proyecto completo en el Drive https://bit.ly/cdsb2021_workflows y pídele a tu compañera/o que lo descargue y compruebe que puede ejecutar el análisis en su computadora. "],["paths-seguros.html", "4 PATHs seguros 4.1 Diapositivas 4.2 Actividad 1", " 4 PATHs seguros María Teresa Ortiz 9 de agosto de 2021 4.1 Diapositivas 4.2 Actividad 1 "],["nombres-de-archivos.html", "5 Nombres de archivos 5.1 Diapositivas 5.2 Actividad 1", " 5 Nombres de archivos María Teresa Ortiz 9 de agosto de 2021 5.1 Diapositivas 5.2 Actividad 1 "],["introducción-a-git-y-github-desde-terminal.html", "6 Introducción a Git y GitHub desde terminal 6.1 Diapositivas 6.2 Actividad", " 6 Introducción a Git y GitHub desde terminal Mirna Vázquez Rosas-Landa 10 de agosto de 2021 6.1 Diapositivas 6.2 Actividad "],["generando-un-proyecto-colaborativo-con-gitgithub.html", "7 Generando un proyecto colaborativo con Git/GitHub 7.1 Colaborando mediante Git y Git Hub 7.2 Inicio del proyecto 7.3 Inicio de la colaboración 7.4 Actualizar un fork desde el repositorio upstream 7.5 Cambios desde un fork hacia el repositorio upstream", " 7 Generando un proyecto colaborativo con Git/GitHub Aurora Labastida 10 de agosto de 2021 div.color { border-radius: 5px; padding: 20px; margin: 30px 0px 30px;} div.cyan { background-color:#00cccc; } div.orange{ background-color:#e6dbcf;} div.pair { display: flex; flex-direction: row; justify-content: center; text-align:center; padding:0px} div.inside { width: 49%; padding: 0px} div.scroll { max-height: 400px; overflow-y: auto; background: #111111; border-radius:5px; padding: 10px; margin: 30px 0px 30px; color: #999999;} div.alert{color:#0D4848; background-color:transparent} Si aún no nos has dado tu nombre de usuario de GitHub añadelo en: Registro de usuarios de GitHub Esto será necesario para formar equipos durante esta sesión. 7.1 Colaborando mediante Git y Git Hub Git y GitHub son muy útiles para la colaboración, pues permiten compartir copias de los proyectos (repositorios) y mantenerlas sincronizadas entre si. Además, permiten visualizar la historia de los cambio hechos por cada colaborador y evitan que los programadores sobre-escriban sobre los cambios de otro miembro del equipo. Ensayaremos algunos principios de la colaboración con Git y GitHub mediante una serie de ejercicios. 7.2 Inicio del proyecto A tí y a un colaborador les interesa la anatomía de gatos. Deciden colaborar para averiguar si hay diferencias significativas en el peso del cuerpo y del corazón entre gatos hembras y machos. Uno de ustedes iniciará el análisis del cuerpo (equipo body) y el otro el análisis del corazón (equipo heart). Para saber en qué equipo estás: Da click aquí Ve a GitHub y usando tu cuenta crea un nuevo repositorio. Equipo body: el nombre de tu repositorio será body Equipo heart: el nombre tu repositorio será heart Incluye un README.md y una descripción. En tu computadora utiliza la terminal para crear una copia local del repositorio ( Obtén el link a tu repositorio ) Equipo body git clone https://github.com/mi_usuario/body Equipo heart git clone https://github.com/mi_usuario/heart Nota En el contexto de esta clase terminal se refiere al entorno de línea de comandos de tu sistema operativo (alguna distribución de Linux o macOS) y GitHub se refiere al sitio web de GitHub (https://github.com/) o de tu cuenta de GitHub. Abre RStudio y cambia la ruta de trabajo a la de tu repositorio. Para ello usa a setwd (en la consola de RStudio) o el menú de RStudio (ve a Session &gt; Choose working directory &gt; Choose directory…). Añade un primer script de R para analizar los datos del cuerpo o del corazón de gatos. Para ello usa el menú de RStudio (ve a File &gt; New File &gt; R Script). Equipo body: el nombre del script será body.R Equipo heart: el nombre del script será heart.R Usaremos el set de datos cats, incluído en el paquete MASS. En él se listan el sexo (Sex), peso corporal (Bwt) y peso del corazón (Hwt) de varios gatos. library(&quot;MASS&quot;) head(cats,3) ## Sex Bwt Hwt ## 1 F 2 7.0 ## 2 F 2 7.4 ## 3 F 2 9.5 Con la función str se observa que se incluyen tanto Hembras (F) como machos (M). str(cats) ## &#39;data.frame&#39;: 144 obs. of 3 variables: ## $ Sex: Factor w/ 2 levels &quot;F&quot;,&quot;M&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ Bwt: num 2 2 2 2.1 2.1 2.1 2.1 2.1 2.1 2.1 ... ## $ Hwt: num 7 7.4 9.5 7.2 7.3 7.6 8.1 8.2 8.3 8.5 ... Contenido del script (ambos equipos) library(&quot;MASS&quot;) # Datos a analizar head(cats) summary(cats) Guarda el script con el nombre antes mencionado. Ahora cuentas con un repositorio en GitHub y con una copia local de dicho repositorio. El repositorio local está configurado para enviar cambios y recibir cambios desde el repositorio original u origin, es decir, el repositorio en GitHub. En la terminal ve a tu repositorio y comparte los cambios con GitHub: Revisa si hay cambios en el arbol de trabajo git status Añade los cambios al siguiente commit. git add * Realiza el commit añadiendo un mensaje. git commit -m &quot;primer script&quot; Enviamos los cambios al GitHub, es decir, al repositorio origin git push 7.3 Inicio de la colaboración Estamos trabajando en nuestro repositorio cuando nuestro colaborador nos pide que ayuda para su proyecto, que también tiene un repositorio de GitHub. Identifica el usuario de GitHub de tu colaborador. Si eres del equipo heart tu colaborador es del equipo body y si eres del equipo body tu colaborador es del equipo heart. Link al repositorio de tu colaborador Un fork de GitHub es una copia del repositorio de un colaborador que podemos administrar en forma independiente. Podemos actualizar el fork con los nuevos cambios del colaborador y sugerir cambios desde nuestro fork a su repositorio. Ve al repositorio de tu colaborador en GitHub Si estás en el equipo body https://github.com/colaborador/heart Si estás en el equipo heart https://github.com/colaborador/body Realiza un fork del repositorio de tu colaborador Figure 7.1: Nota: si eres del equipo heart el nombre del repositorio será body 7.4 Actualizar un fork desde el repositorio upstream Tu colaborador realizó un fork de tu repositorio para apoyarte en el análisis estadístico. Ahora tú sigues añadiendo cambios en tu repositorio. Así pues el fork que creó tu colaborador se irá quedando momentaneamente atrás de tu repositorio. Usando a RStudio añade nuevos cambios a tu repositorio original. Si eres del equipo body añade al script body.R: # Estadísticas del cuerpo por sexo tapply(cats$Bwt,cats$Sex,summary) Si eres del equipo heart añade al script heart.R # Estadísticas del corazon por sexo tapply(cats$Hwt,cats$Sex,summary) Ve a la terminal y envía los cambios a GitHub. Nota sobre el análisis: Ejecuta el script body.R o heart.R. El test estadístico t sugiere que el peso promedio del cuerpo y del corazón es significativamente distinto entre gatos hembras y machos. Realizaste el fork del repositorio de tu colaborador para apoyarlo en el análisis estadístico. Después de ello tu colaborador siguió añadiendo cambios en su repositorio por lo que decides actualizar tu fork con sus cambios. Ve al fork que creaste en GitHub ( Link al fork ). GitHub te indica que el fork se encuentra detrás del repositorio de tu colaborador. Actualízalo con la opción Fetch upstream. Figure 7.2: Nota: Si estás en el equipo heart el fork se llamará body 7.4.1 Sincronización desde la terminal Sigues añadiendo cambios en tu repositorio. Tu colaborador tendrá que seguir sincronizando su fork con tus cambios. En RStudio añade otro cambio a tu repositorio original. Si estás en el equipo body añade al script body.R: # Prueba estadistica t.test(cats$Bwt~cats$Sex) Si estás en el equipo heart añade al script heart.R: # Prueba estadistica t.test(cats$Hwt~cats$Sex) Ve a la terminal y envía los cambios a GitHub. Tu colaborador ha vuelto a hacer cambios en su repositorio. Esta vez decides crear una copia local del fork en tu computadora y actualizarla con los nuevos cambios. Usando la terminal clona el fork que está en tu cuenta de GitHub ( Link al fork ). Si eres del equipo body git clone https://github.com/mi_usuario/heart.git Si eres del equipo heart git clone https://github.com/mi_usuario/body.git Nota En tu cuenta de GitHub se encuentran el repositorio que tú iniciaste (de aquí en adelante tú repositorio) y el fork del repositorio de tu colaborador (de aquí en adelante el fork) y has creado copias locales de ambos. Dichas copias están configuradas para recibir y enviar actualizaciones desde y hacia el repositorio origin. En ambos casos el origin es el repositorio que está en tu cuenta de GitHub. En el caso de la copia local del fork también puedes añadir al repositorio de GitHub de tu colaborador como repositorio upstream (río arriba). De esta forma podrás recibir actualizaciones directamente de dicho repositorio. En la terminal entra al fork Identifica el o los repositorios remotos a los que que está conectada esta copia local del fork. git remote -v Añade eñ repositorio de tu colaborador como upstream ( Link al repositorio de tu colaborador ): Si eres del equipo body git remote add upstream https://github.com/colaborador/heart.git Si eres del equipo heart git remote add upstream https://github.com/colaborador/body.git Observa cómo cambio la configuración de los repositorios remotos. git remote -v Revisa los cambios que ha hecho tu colaborador git fetch upstream git log -p HEAD..FETCH_HEAD Ahora puedes añadir los cambios usando: git merge upstream/main O bien, git pull upstream main Nota que los cambios se añadieron a la copia local del fork, pero no al repositorio origin en GitHub. Para añadir los cambios en origin. git push origin Ahora tu copia del fork, está sincronizada con el repositorio upstream y el repositorio origin. 7.5 Cambios desde un fork hacia el repositorio upstream Tienes planeado trabajar en el fork para añadir una gráfica al proyecto de tu colaborador. 7.5.1 Trabajando con ramas Git y GitHub permiten generar ramas. Cada repositorio tiene una rama principal (main), que muestra la versión principal del proyecto. Los colaboradores pueden generar nuevas ramas, que serán versiones separadas de main y trabajar en ellas sin que main se vea afectada durante el proceso. Ve a la terminal y entra al fork. Observa las ramas actuales del repositorio git branch Crea una nueva rama graph que te servirá para añadir una gráfica al análisis. git branch graph Observa nuevamente las ramas. git branch Cambia a la rama graph. git checkout graph Abre RStudio y establece al fork como directorio de trabajo. Abre el script de R y haz una adición al análisis -Si eres del equipo body abre el script heart.R y añade #Gráficas del peso del corazón por sexo boxplot(Hwt ~ Sex, data = cats) -Si eres del equipo heart abre el script body.R y añade #Gráficas del peso del cuerpo por sexo boxplot(Bwt ~ Sex, data = cats) Nota sobre el análisis: Ejecuta el script body.R o heart.R. Las gráficas muestran una distribución del peso del cuerpo y del corazón distinta para gatos hembras y machos. Guarda los cambios al script en RStudio En la terminal añade los cambios en el fork mediante un commit. Envía los cambios a al repositorio origin, creando una nueva rama. git push origin graph 7.5.2 Abrir un Pull Request Para comenzar este proceso ve al fork que creaste en GitHub ( Link al fork ) Ve al fork en GitHub. Observa que ahora existen dos ramas. Cambia a la rama graph Selecciona la opción Contribute y después Open pull request Nota que has pasado del fork al repositorio upstream (el de tu colaborador). Abre el Pull Request dejando una nota. 7.5.3 Aceptar un Pull Request Tu colaborador ha enviado una contribución desde su fork hacia tu repositorio de GitHub. Ve a tu repositorio para aceptar su Pull Request. ( Link al tu repositorio ) Ve a tu repositorio en GitHub, abre la pestaña Pull Requests y después el Pull Request de tu colaborador En la nueva página selecciona Merge pull requests Ahora utiliza Confirm merge 7.5.4 Sincronización final del fork Tu colaborador ha aceptado tu Pull Request. Tu cotribución ya está en la rama main del repositorio upstream. Ahora debes actualizar la rama main de tu fork con los mismos cambios. En GitHub ve a la la rama main del fork y utiliza a Fetch upstream ( Link al fork ). Ve a la terminal de Linux/Mac y actualiza la copia local del fork. Primero ve a la rama main. git checkout main Y acualiza la rama main con el contenido del repositorio origin. git pull origin main Una vez que tus cambios están añadidos al repositorio main local, origin y upstream puedes eliminar la rama graph Para eliminarla de la copia local del fork git branch -d graph Para eliminarla en el repositorio origin (en GitHub) git push origin --delete graph "],["git-y-github-con-rstudio.html", "8 Git y GitHub con RStudio 8.1 Diapositivas 8.2 Manual de sobreviviencia con Git Y GitHub en RStudio (en caso de ser necesario) 8.3 Actividad", " 8 Git y GitHub con RStudio Erick Cuevas-Fernández 10 de agosto de 2021 8.1 Diapositivas 8.2 Manual de sobreviviencia con Git Y GitHub en RStudio (en caso de ser necesario) Por cualquier problema con la conexión entre RStudio y Git, siempre ten en cuenta la ubicación de dónde se instaló Git. Puedes usar en la terminal which git (Mac y Linux) O bien usar en la terminal where git (Windows) Recuerda que la terminal (o línea de comandos ó consola ó shell ó bash) es un programa en tu computadora que funciona para correr otros programas. Desde RStudio puedes abrir la terminal, lo cual es muy conveniente si estás trabajando en un proyecto. Puedes abrir una terminal con: Tools &gt; Terminal (abre la terminal dentro del IDE de RStudio) Tools &gt; Shell (abre una terminal externa a RStudio) La recomendación actual de GitHub es usar HTTPS porque es la manera más fácil de configurar y tiene operabilidad en multiples redes y plataformas. Es menos probable que HTTPS sea bloqueado por un firewall. Una conexión HTTPS permite que credential.helper almacene en caché su contraseña. (por tanto puedes configurar tu usuario y contraseña en tu equipo de uso) Es más sencillo acceder a un repositorio desde cualquier lugar, ya que solo necesita los detalles de su cuenta (no se requieren claves SSH) para escribir en el repositorio. Usualmente cuando inicies un proyecto colaborativo con GitHub inicializa el ropositorio con un README. Copia el HTTPS URL para clonar el repositorio en la terminal git clone https://github.com/TU-USUARIO/TU-REPOSITORIO.git. 8.2.1 Credenciales HTTPS en Cache Puedes crear un token de acceso personal, PAT (PERSONAL ACCESS TOKEN), esa será tu credencial para HTTPS. Es una alternativa al uso de contraseñas para la autenticación en GitHub cuando utilizas la API de GitHub o la línea de comandos. Como precaución de seguridad, GitHub elimina automáticamente los tokens de acceso personales que no se han usado durante un año. ¿Cómo crear un token? Ve a tu perfil de GitHub, dale click a la imagen de perfil (usualmente en la esquina superior derecha), y busca la opción de settings ó configuración según sea la configuración de idioma que tengas. Da click a continuación en Developer settings ó Parámetros del desarrollador. En la barra lateral izquierda da click en Tokens de acceso personal. Haz click en Generar un nuevo token. Asígna un nombre descriptivo a tu token. Selecciona los alcances o permisos que deseas otorgarle a este token. Para usar tu token para acceder a repositorios desde la línea de comando, selecciona repo. Finalmente haz click en generar token. Listo, copia y pega tu token en el lugar dónde siempre lo puedas volver a copiar, ya que por razones de seguridad, una vez salgas de la página no podrás volver a ver el token. Nota: Preserva tus tokens de la misma manera que tus contraseñas y no se las reveles a nadie. Cuando trabajes con la API, usa tokens como variables del entorno en lugar de codificarlos de forma rígida en tus programas. Una vez que tengas un token, puedes ingresarlo en lugar de tu contraseña cuando realices operaciones de Git a través de HTTPS. El punto final es que una vez configurada una PAT, varios paquetes de R, incluidos usethis y gh, podrán trabajar con la API de GitHub en su nombre, de forma automática. Por lo tanto, una PAT configurada correctamente significa que todo esto funcionará a la perfección: - Operaciones HTTPS remotas a través de la línea de comando Git y, por lo tanto, a través de RStudio - Operaciones HTTPS remotas a través del paquete gert R y, por lo tanto, usethis - Operaciones de la API de GitHub a través del paquete gh R y, por lo tanto, usethis ¿Cómo crear un token desde R? Puedes ir directamente a la página de GitHub a la parte para generar tu token de acceso personal mediante la siguiente función: usethis::create_github_token() Y con las opciones que se mencionaban anteriormente puedes configurar y crear tu PAT. 8.3 Actividad "],["merge-y-conflictos-de-versiones-en-git-y-github.html", "9 Merge y conflictos de versiones en Git y GitHub 9.1 Diapositivas 9.2 Actividad", " 9 Merge y conflictos de versiones en Git y GitHub Alejandra Medina-Rivera 10 de agosto de 2021 9.1 Diapositivas 9.2 Actividad "],["modificando-los-archivos-de-inicio-de-r.html", "10 Modificando los archivos de inicio de R 10.1 Diapositivas 10.2 Actividad", " 10 Modificando los archivos de inicio de R Joselyn Chávez 11 de agosto de 2021 10.1 Diapositivas 10.2 Actividad "],["keynote-código-legible-en-r-6-consejos-simples-y-prácticos-para-escribir-mejor-código.html", "11 Keynote Código legible en R: 6 consejos simples y prácticos para escribir mejor código 11.1 Diapositivas", " 11 Keynote Código legible en R: 6 consejos simples y prácticos para escribir mejor código Ángel Escalante 11 de agosto de 2021 11.1 Diapositivas "],["mantenimiento-del-espacio-de-trabajo.html", "12 Mantenimiento del espacio de trabajo 12.1 Diapositivas 12.2 Actividad", " 12 Mantenimiento del espacio de trabajo Joselyn Chávez 11 de agosto de 2021 12.1 Diapositivas 12.2 Actividad "],["instalación-de-paqueterías-desde-código-fuente.html", "13 Instalación de paqueterías desde código fuente 13.1 Diapositivas 13.2 Actividad", " 13 Instalación de paqueterías desde código fuente Joselyn Chávez 11 de agosto de 2021 13.1 Diapositivas 13.2 Actividad "],["introducción-a-shiny.html", "14 Introducción a Shiny 14.1 Diapositivas 14.2 ¿Qué es y para qué me sirve Shiny? 14.3 La estructura canónica de Shiny 14.4 La Interfaz de Usuario (UI)", " 14 Introducción a Shiny Erick Cuevas-Fernández 12 de agosto de 2021 14.1 Diapositivas 14.2 ¿Qué es y para qué me sirve Shiny? Este paquete fue creado en 2012 por RStudio para desarrollar aplicaciones Web con el uso de R. Shiny es un paquete de R que nos permite generar módulos de mando web interactivos, crear interfaces para algoritmos o bien manipular en tiempo real tablas de datos y gráficos a través de controles de HTML. Para instalarlo puedes usar los siguientes códigos: install.packages(&quot;shiny&quot;) if (!require(&quot;devtools&quot;)) install.packages(&quot;devtools&quot;) devtools::install_github(&quot;shiny&quot;, &quot;rstudio&quot;) Mediante esta paquetería podemos personalizar nuestra creación de forma sencilla con sintaxis HTML, CSS o Javascript. Pero aún así solo se requieren conocimientos de R para emplear Shiny. 14.3 La estructura canónica de Shiny Toda aplicación web de Shiny tendrá la misma estructura, dos bloques de códigos de R: ui: genera una interfaz de usuario server: contiene las instrucciones que la computadora necesita para crear la app. La estructura de código de una app Shiny se vería del siguiente modo: library(shiny) ui &lt;- fluidPage( xxxxInput(), xxxxOutput() ) server &lt;- function(input, output) { Codigo de R } shinyApp(ui = ui, server = server) En RStudio puedes generar una nueva app con este molde de código mediante los siguientes pasos: Crea un nuevo directorio y un archivo app.R que contenga una aplicación básica en un solo paso haciendo clic en Archivo | Nuevo proyecto, luego selecciona Nuevo directorio y Shiny Web Application. Si ya has creado el archivo app.R, puedes agregar rápidamente el texto estándar de la aplicación escribiendo “shinyapp” y presionando Shift + Tab. También puedes hacer dos scripts por separado, ui.R y server.R y ejecutar ambos en la app.R con shinyApp(ui = ui.R, server = server.R). Para que la app esté completa necesitas solo 4 cosas en tu app.R: Cargar la paquetería de Shiny con library(shiny) Definir la interfaz de usuario, la web HTML con la que interactúan quienes ocuparán la app. Es decir, definir la ui. Especificar el comportamiento de nuestra aplicación definiendo una función de server. Ejecutar shinyApp(ui, server) para construir e iniciar una Shiny app. 14.3.1 Actividad Genera un archivo app.R listo para hacer una Shiny app. Puedes generar solo un app.R y posteriormente escribir en la consola “shinyapp” y presionar Shift + Tab 14.4 La Interfaz de Usuario (UI) Shiny por default usa bootstrap (lo cual no tiene nada que ver con el método estadistico bootstrap). Esto es un marco de trabajo de HTML, CSS y Javascript más popular para desarrollar sitios web receptivos. OJO: si sabes usar HTML puedes usar todos los tags en Shiny. Puedes consultar estos tags con la siguiente función: shiny::tags names(shiny::tags) "],["mi-primera-aplicación-shinyr.html", "15 Mi primera aplicación ShinyR 15.1 Diapositivas 15.2 Actividad", " 15 Mi primera aplicación ShinyR Alejandro Reyes 12 de agosto de 2021 15.1 Diapositivas 15.2 Actividad "],["proyecto-en-equipo.html", "16 Proyecto en equipo 16.1 Actividad", " 16 Proyecto en equipo Alejandro Reyes, Erick Cuevas-Fernández y Joselyn Chávez 12 de agosto de 2021 16.1 Actividad "],["keynote-aplicaciones-shinyr-en-la-vida-diaria.html", "17 Keynote: Aplicaciones ShinyR en la vida diaria 17.1 Diapositivas", " 17 Keynote: Aplicaciones ShinyR en la vida diaria Alejandro Ponce 13 de agosto de 2021 17.1 Diapositivas "],["presentación-de-proyectos.html", "18 Presentación de proyectos 18.1 Proyectos", " 18 Presentación de proyectos 13 de agosto de 2021 18.1 Proyectos Proyecto 1: Proyecto 2: Proyecto 3: "]]
